// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RazorLibraryProject.Data;

#nullable disable

namespace RazorLibraryProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230215061631_AddedAllTheRoleChecking")]
    partial class AddedAllTheRoleChecking
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "51625042-f06d-47ac-bc9e-62886d01044e",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f3b2f2ae-8395-46a5-9655-f0c351d1d9f8",
                            Name = "borrower",
                            NormalizedName = "BORROWER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "28ad7b5d-a958-4e75-849b-cd752590f760",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20886705-bae3-43bf-83e5-863b9cf896b4",
                            Email = "borrower@library.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "borrower@library.net",
                            NormalizedUserName = "borrower@library.net",
                            PasswordHash = "AQAAAAIAAYagAAAAEDSgQ3Bv1i34tRRpnqGoQs3979guahNAL+bKQ0wr3XOkGioElXXcnXSFUAJtT2z9Dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f17845c-001c-4d7d-b465-1784bc6e5b2f",
                            TwoFactorEnabled = false,
                            UserName = "borrower@library.net"
                        },
                        new
                        {
                            Id = "22a44f97-6203-4035-82ff-f74166c4868c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66f69cc9-bb2f-4e30-b013-d612c1649ba0",
                            Email = "librarian@library.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "librarian@library.net",
                            NormalizedUserName = "librarian@library.net",
                            PasswordHash = "AQAAAAIAAYagAAAAEBZBCBUmH8TsfJpVgUUkGXz7looM4YYBvOiPb9YLXQBkMARJyFEsPJ+kO7nF0nEZ/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36ef55c9-d503-48e4-a493-3442f05b2bf0",
                            TwoFactorEnabled = false,
                            UserName = "librarian@library.net"
                        },
                        new
                        {
                            Id = "de9a5d7f-723e-4db6-83e9-8ddd324bfee5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b715e916-e1ea-415b-8be8-cdc6a8db3074",
                            Email = "elaine_grady@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELFlQSxdiYAKaLtHghO4ocmrAxvpJic9XJVvBBZfwBznl1TXkd4Gl2OqfnmrVuSN1w==",
                            PhoneNumber = "1-511-685-6485",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cbbc42a-6b7c-4fc3-b5d6-fd7b548d1706",
                            TwoFactorEnabled = false,
                            UserName = "Elaine_Grady"
                        },
                        new
                        {
                            Id = "84756e3a-1849-4845-aa1b-8e008d2e3370",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "590ee0d2-aa98-4c39-b933-3a34e3eac3f9",
                            Email = "abraham.anderson@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJR1e03HHltyWphDYT/nXcZBGdYvE7OJY7/illzDT7IcP6t1dvbWrrxHuiPVXrgAVA==",
                            PhoneNumber = "853.296.8968 x370",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec5fb77b-493a-480e-8fc1-e87ad8335ec1",
                            TwoFactorEnabled = false,
                            UserName = "Abraham.Anderson"
                        },
                        new
                        {
                            Id = "c4cd5330-0a05-4eb5-b14a-7aa56d3a9963",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9b574f6-b380-48a7-91a0-6eb71fba2507",
                            Email = "alexis.wiza@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGOgIo/fGXbZ7cTH13Rp5kCYDjLYftzYrKOoIdGAqwaSpWW2zmhN2zFE4TJvfYcwyw==",
                            PhoneNumber = "(501) 908-2441",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ab72795-dd8f-4713-9d38-0af0772ee6f6",
                            TwoFactorEnabled = false,
                            UserName = "Alexis.Wiza"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "28ad7b5d-a958-4e75-849b-cd752590f760",
                            RoleId = "f3b2f2ae-8395-46a5-9655-f0c351d1d9f8"
                        },
                        new
                        {
                            UserId = "22a44f97-6203-4035-82ff-f74166c4868c",
                            RoleId = "51625042-f06d-47ac-bc9e-62886d01044e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RazorLibraryProject.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorFirst = "Travis",
                            AuthorLast = "Hamill",
                            Description = "Quos voluptatem odit. Repudiandae molestiae provident aut ipsum officiis vero excepturi et. Quam quas in accusantium fuga in nihil possimus perferendis.",
                            Title = "Devolved explicit model",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 2,
                            AuthorFirst = "Alfonso",
                            AuthorLast = "Kunde",
                            Description = "Quidem consequatur odit corporis voluptas. Rerum accusantium illo et. Et eaque voluptas. Itaque sint culpa eveniet itaque vel officiis qui consequatur aut.",
                            Title = "Programmable full-range extranet",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 3,
                            AuthorFirst = "Dana",
                            AuthorLast = "Lockman",
                            Description = "Expedita eius ut ad libero itaque voluptates temporibus quo. Fugiat similique aut commodi. Sit cum ut suscipit nihil incidunt cupiditate.",
                            Title = "Horizontal bandwidth-monitored framework",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 4,
                            AuthorFirst = "Alvin",
                            AuthorLast = "Boehm",
                            Description = "Eos non repudiandae. Voluptates animi minus a esse modi culpa voluptate tenetur. Quia ipsam aut voluptas qui cupiditate voluptatum voluptatem aut.",
                            Title = "Digitized eco-centric help-desk",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 5,
                            AuthorFirst = "Dora",
                            AuthorLast = "Schmitt",
                            Description = "Rerum aut omnis tempore quasi incidunt corporis et. Sed temporibus sunt accusantium veritatis animi cum quidem est assumenda. Voluptate dignissimos rerum soluta totam eveniet voluptatem architecto et minima. Nisi alias sed dicta eum exercitationem non quasi. Harum molestiae delectus qui distinctio quia hic odio ut.",
                            Title = "Proactive regional architecture",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 6,
                            AuthorFirst = "Tyrone",
                            AuthorLast = "Lang",
                            Description = "Sunt sed nesciunt facere quidem numquam possimus inventore libero. Voluptates id eaque cumque qui odit. Quia delectus sunt nisi totam voluptates. Quaerat non inventore odit quia.",
                            Title = "Centralized bandwidth-monitored moderator",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 7,
                            AuthorFirst = "Marion",
                            AuthorLast = "Hudson",
                            Description = "Similique accusantium sequi excepturi earum voluptates odit. Odit corrupti eum voluptate et. Tempore cupiditate ullam perferendis velit ab omnis nam rerum. Qui nihil ullam deleniti iusto a ipsa sed expedita reiciendis. Alias quod et sequi.",
                            Title = "Devolved grid-enabled paradigm",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 8,
                            AuthorFirst = "Frankie",
                            AuthorLast = "Hettinger",
                            Description = "Molestias reprehenderit natus nisi consectetur vero soluta. Aut minus est consequatur sed dignissimos animi. Ut expedita reiciendis. Vero eum dolorem voluptatem. Et consequatur ut cupiditate. Nostrum et quia repellat repellat.",
                            Title = "Operative neutral function",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 9,
                            AuthorFirst = "Victoria",
                            AuthorLast = "Medhurst",
                            Description = "Doloremque aut eos illum. Aspernatur aspernatur maxime aliquam facilis blanditiis qui voluptas delectus iusto. Incidunt quia amet eos. Est nesciunt consequatur explicabo quam omnis id cupiditate. Enim vel dignissimos sit velit eaque esse eum ratione esse. Quis nisi eaque maxime eligendi aut et ipsum.",
                            Title = "Enhanced methodical encoding",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 10,
                            AuthorFirst = "Wilfred",
                            AuthorLast = "Hahn",
                            Description = "Eos corporis dignissimos aut quia. Magnam amet soluta autem neque enim rem non cum voluptate. Qui temporibus perspiciatis exercitationem.",
                            Title = "Cross-group background frame",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 11,
                            AuthorFirst = "Manuel",
                            AuthorLast = "Bosco",
                            Description = "Ratione exercitationem sint voluptas libero illo. Ab delectus at. Sunt non quia quia nam laudantium. Suscipit delectus ullam sunt doloribus minus.",
                            Title = "Horizontal reciprocal structure",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 12,
                            AuthorFirst = "Sergio",
                            AuthorLast = "Ledner",
                            Description = "Totam vero sunt ipsum et labore esse voluptatem maiores. Non qui sit dolor molestias fugiat. Doloribus ut porro. Rem numquam velit ab incidunt et asperiores. Natus voluptates itaque qui aut commodi est et qui.",
                            Title = "Upgradable encompassing encoding",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 13,
                            AuthorFirst = "Don",
                            AuthorLast = "Altenwerth",
                            Description = "Aut suscipit ab iste quas non ullam nostrum. Ut voluptas nobis illo quae dignissimos ducimus. Expedita impedit perspiciatis nesciunt aliquid. Natus molestiae quasi et quod. Esse non consequatur dolore delectus qui. Eaque consequatur aut hic voluptatem hic sequi est et qui.",
                            Title = "Synergized grid-enabled parallelism",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 14,
                            AuthorFirst = "Erin",
                            AuthorLast = "Lowe",
                            Description = "Quia nostrum iure quo et et deleniti optio nihil. Iure consequatur sequi explicabo iste ea nisi qui autem incidunt. Natus quia dolorem est. Delectus distinctio dignissimos eum quia.",
                            Title = "Multi-layered high-level policy",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 15,
                            AuthorFirst = "Austin",
                            AuthorLast = "Anderson",
                            Description = "Illum quia odit in magnam. Porro asperiores recusandae non aliquid explicabo id quo non. Id architecto omnis sequi exercitationem omnis vel eligendi.",
                            Title = "Secured intermediate customer loyalty",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 16,
                            AuthorFirst = "Justin",
                            AuthorLast = "Powlowski",
                            Description = "Eveniet accusamus qui vitae ut eos enim voluptates ut. Et et autem veritatis. Sit fugit atque deserunt porro id. Et adipisci rem natus eum provident reiciendis sapiente deleniti. Tempora iusto est fugiat doloremque voluptas magnam nobis. Distinctio voluptatem velit autem dolorum praesentium voluptatem at.",
                            Title = "Synergized high-level pricing structure",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 17,
                            AuthorFirst = "Kristin",
                            AuthorLast = "Bechtelar",
                            Description = "Laudantium atque et corporis non nam vel voluptate quis voluptatibus. Tempora autem et autem. Odit est velit veritatis repudiandae ut nihil et impedit et.",
                            Title = "Open-architected coherent conglomeration",
                            isAvailable = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
