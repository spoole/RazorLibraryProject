// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RazorLibraryProject.Data;

#nullable disable

namespace RazorLibraryProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "79def9d3-b27b-4b61-8760-5a203989e66d",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d514ddad-c571-4f8c-9f98-feb64cf43687",
                            Name = "borrower",
                            NormalizedName = "BORROWER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7fb6815b-00a5-4873-ad30-e486699fae3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70cbdb32-9b1b-41fc-8cd1-1f1fbd99aa56",
                            Email = "borrower@library.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "borrower@library.net",
                            NormalizedUserName = "borrower@library.net",
                            PasswordHash = "AQAAAAIAAYagAAAAEDKVVvMiSxl25d4MBd4R2IOiBDyWvnjAKGAcfEIPoZP1G7IfTkYAg4ae+WLBhOW3nA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f755460-2149-49b4-a45d-c0a63b1820b6",
                            TwoFactorEnabled = false,
                            UserName = "borrower@library.net"
                        },
                        new
                        {
                            Id = "8fde4435-b65c-4118-9b07-777dc36de1ec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "212290d9-22d0-4d21-a05b-f62a230a923e",
                            Email = "librarian@library.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "librarian@library.net",
                            NormalizedUserName = "librarian@library.net",
                            PasswordHash = "AQAAAAIAAYagAAAAEOwd8m/UGdkzqZ7tTAScqJYi8nuKlqDt7mf6VixkAzUSsIK61oePGrlpM+m75h1Ssg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad68a1bf-cdef-4cdc-b6ef-fa5be7822fd8",
                            TwoFactorEnabled = false,
                            UserName = "librarian@library.net"
                        },
                        new
                        {
                            Id = "a5a0ea15-a7be-4c51-9f97-91a0b9e8b5aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0237fe14-357f-4a78-ba67-52f0eac9c2ed",
                            Email = "debbie.konopelski@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDpWvNyfrDNNLPs3bbcWudx+d2BOARftJcup+fw48oXmOBBZcjkG/FHQrkncD8OCBw==",
                            PhoneNumber = "888-530-7928 x949",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91fd3751-1ddd-4127-954a-70df9342afd2",
                            TwoFactorEnabled = false,
                            UserName = "Debbie.Konopelski"
                        },
                        new
                        {
                            Id = "7cb4926d-b477-4e08-b943-7379702870fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30cbbc5d-f840-4d1d-8934-762d755cb236",
                            Email = "raquel_kirlin@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENJTAjOqSgei9tviKe8vVGVc/s6K/xtP5b+nYf3N0aPTD57yW1/w5NpRYVteiWaItg==",
                            PhoneNumber = "(268) 578-3031 x40175",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e138184b-18d3-49e8-8d32-f04072b9b48e",
                            TwoFactorEnabled = false,
                            UserName = "Raquel_Kirlin"
                        },
                        new
                        {
                            Id = "86167717-26ab-4728-8fca-a8fcc5d0ab47",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04269e92-d6ca-460d-b427-a241a1f4d8b5",
                            Email = "pat73@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBnui3CRPdbYJHfBwsQRBkccvxoVlUHCeRah9bYuXehI6boc5G49sMatCMxo2pxtZg==",
                            PhoneNumber = "929-866-9309",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9153d666-9eb8-43b8-b730-611af1ac5f67",
                            TwoFactorEnabled = false,
                            UserName = "Pat73"
                        },
                        new
                        {
                            Id = "000d28c2-28e6-4127-be2f-6dcd021798bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d495bc51-60a8-475f-aff3-22af1147be2a",
                            Email = "christopher11@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJAAM9jAiwh/eo+MncygmWqBYyQ9t3AGmXd/dxCbMSYob+e2+bC/tkIWHqMmhpIlUg==",
                            PhoneNumber = "782-271-1673 x36499",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "455f9e34-8ffc-44b1-bc53-139c1f624aa9",
                            TwoFactorEnabled = false,
                            UserName = "Christopher11"
                        },
                        new
                        {
                            Id = "d7cda298-606f-4d4d-9b31-c795df3f90ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7c6c910-4144-48a3-976f-77340449d8ad",
                            Email = "leonard60@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFSdXGRQIzeiw0EWvSUhU+z9KUIWt7S+eLl7zu5xv4uhlzpomY/2Y4K/CNyv2fEGgA==",
                            PhoneNumber = "(839) 768-9207 x78327",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7361e54-ecb1-4c82-a513-f56e2a64dfb6",
                            TwoFactorEnabled = false,
                            UserName = "Leonard60"
                        },
                        new
                        {
                            Id = "b6fbeaf2-5abe-44a8-b5dc-83c5d3a1f7b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e69aebb3-83db-404a-8bc0-d12f3cb92cbf",
                            Email = "jeremiah.schoen50@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMihyRFW/GOTQnvtaKWCeKkklSpN88DV8WEeeiKtnBmr4FUFxwSpDdNuPcbkh4RqBQ==",
                            PhoneNumber = "1-264-664-7726 x958",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4edc7c74-d423-42d1-a3a9-211710b76101",
                            TwoFactorEnabled = false,
                            UserName = "Jeremiah.Schoen50"
                        },
                        new
                        {
                            Id = "9d1c7649-4187-4ff9-aa24-7cbf72533d56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9de576b4-340f-4222-b8c1-0a0dda132795",
                            Email = "brandon.oberbrunner18@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEM7qImjf8hINcJUnNuoU1jaOni3+OvaJSVTw09VPqSpDlUZePoCmpOXXfYykolY8QA==",
                            PhoneNumber = "581-635-9342 x752",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0d4708a-90bb-4c98-bb1f-2d9e3b8308d7",
                            TwoFactorEnabled = false,
                            UserName = "Brandon.Oberbrunner18"
                        },
                        new
                        {
                            Id = "13033fa8-5218-4c9a-9ede-0232ac02cb2a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b43315e1-a60f-4f57-84e6-2639b072e45e",
                            Email = "brian25@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDgreTDnbux5x1kWEX3mFzSOKz1ytOYsZlX9xaQZXyXTzS0HOKcguWncdN/9Yhm3bA==",
                            PhoneNumber = "959-277-8479",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b90996cd-86c9-43c3-8d87-9f9c264c5fe1",
                            TwoFactorEnabled = false,
                            UserName = "Brian25"
                        },
                        new
                        {
                            Id = "6c053872-0689-4309-ba4e-8e3e9054a0cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3297eac-7a5f-4382-b90b-848a5945f0d9",
                            Email = "gilberto52@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMhzTu3XSbY1adRwdifkIvMxmRB4ymuHNWaewU4KvxQDHgGE+kmXCo68myk6cNwSqQ==",
                            PhoneNumber = "256.589.0625 x44813",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85c290f2-e9e4-44cf-92ef-385c8605c1b9",
                            TwoFactorEnabled = false,
                            UserName = "Gilberto52"
                        },
                        new
                        {
                            Id = "02f36c4e-cc0a-4cad-8123-fce64015a172",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6a0a076-f464-4a78-be71-f492c8222657",
                            Email = "karla.pollich@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENwJM5R38pzmmcWC3xVWkMxVCmgVzmsmzj153paCspR2mRnpHhol3gCmtbjRJM8Rpg==",
                            PhoneNumber = "660-954-6311",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52a098e5-6203-453b-b9ea-5538cf0714d5",
                            TwoFactorEnabled = false,
                            UserName = "Karla.Pollich"
                        },
                        new
                        {
                            Id = "177e0c79-3da8-404a-9621-103021a01cd4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2f485e1-9ee6-45bf-85e2-71ac023088de",
                            Email = "terrence.steuber@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHYMGU0KCYB7S2Oc3ASlJrqU9DP4GO46TNm4RH24Pb8XQYMjno/fcnmUXaT1V9QN5A==",
                            PhoneNumber = "553.272.1085 x35658",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7962c28-c8d1-4133-8a16-27d233aa912f",
                            TwoFactorEnabled = false,
                            UserName = "Terrence.Steuber"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7fb6815b-00a5-4873-ad30-e486699fae3c",
                            RoleId = "d514ddad-c571-4f8c-9f98-feb64cf43687"
                        },
                        new
                        {
                            UserId = "8fde4435-b65c-4118-9b07-777dc36de1ec",
                            RoleId = "79def9d3-b27b-4b61-8760-5a203989e66d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RazorLibraryProject.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorFirst = "Patrick",
                            AuthorLast = "Zemlak",
                            Description = "Possimus explicabo dignissimos minima aspernatur. Occaecati aut ipsum quia ex. In sint qui. Quod aut veniam soluta laudantium earum facere ducimus.",
                            Title = "Expanded zero defect matrices",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 2,
                            AuthorFirst = "Linda",
                            AuthorLast = "Heidenreich",
                            Description = "Nulla et laboriosam laborum sunt qui similique dolor. Eius hic alias minima laudantium et quisquam architecto et sit. Molestiae quibusdam necessitatibus amet et sed dolores adipisci.",
                            Title = "Triple-buffered foreground hub",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 3,
                            AuthorFirst = "Terrance",
                            AuthorLast = "Leffler",
                            Description = "Harum et vel tempore suscipit veniam voluptatum quia. Dolor voluptatem est voluptas assumenda ut tenetur sunt expedita reiciendis. Autem quia molestiae. Id rerum omnis consequatur vero et dolore ab. Repudiandae aliquam tenetur dolore iusto inventore et nesciunt. Quas sit recusandae quo.",
                            Title = "Ergonomic motivating intranet",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 4,
                            AuthorFirst = "Lydia",
                            AuthorLast = "Cummerata",
                            Description = "Et et ut eveniet alias et. Et expedita omnis distinctio ad distinctio. Minus consequatur fugiat incidunt assumenda officiis autem. Et ratione animi. Qui molestiae omnis perferendis porro dolorem veritatis. Beatae fugit omnis voluptas aliquam accusamus.",
                            Title = "Advanced grid-enabled implementation",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 5,
                            AuthorFirst = "Elizabeth",
                            AuthorLast = "Dickens",
                            Description = "Dolorum quidem reprehenderit cum. Facere corporis quia rerum enim. Est iusto dolor eaque quia et laboriosam iusto est. Eius et reprehenderit modi.",
                            Title = "Re-contextualized full-range success",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 6,
                            AuthorFirst = "Kimberly",
                            AuthorLast = "Daniel",
                            Description = "Optio quo dolorem aut. Quia animi labore rem. Doloremque et vero sunt quod ex quia quasi accusantium. Esse eos facere vel et. Neque minus repellat et necessitatibus harum consequatur corporis sunt pariatur.",
                            Title = "Right-sized object-oriented frame",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 7,
                            AuthorFirst = "Kristin",
                            AuthorLast = "Hermann",
                            Description = "Optio in quae animi. Impedit est sint consequatur doloremque vel aut eveniet. Error cupiditate asperiores similique non doloribus tempora voluptatem eligendi eos.",
                            Title = "Total non-volatile attitude",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 8,
                            AuthorFirst = "Victoria",
                            AuthorLast = "Wunsch",
                            Description = "Dolor ullam autem animi qui vero. Earum et et veritatis et ut et. Iusto laboriosam modi commodi cumque sed eligendi. Nobis debitis nesciunt perferendis quo. Quo earum eum autem voluptate libero ut rerum minus temporibus. Voluptatem magnam dolorem excepturi.",
                            Title = "Secured regional support",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 9,
                            AuthorFirst = "Lydia",
                            AuthorLast = "Wintheiser",
                            Description = "Vel est deserunt voluptates laborum doloremque ea cupiditate perferendis. Commodi laudantium dicta rerum quas quasi ea nemo optio. Ex eligendi fuga. Possimus repellendus est corporis nostrum qui consequuntur exercitationem. Exercitationem deserunt ducimus excepturi est unde qui sit.",
                            Title = "Polarised asymmetric capability",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 10,
                            AuthorFirst = "Dan",
                            AuthorLast = "Wintheiser",
                            Description = "Voluptatem velit voluptatibus. Minima eos sed. Repellendus id eos nihil ullam.",
                            Title = "Front-line secondary implementation",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 11,
                            AuthorFirst = "Kristen",
                            AuthorLast = "Wunsch",
                            Description = "Deleniti sint quia at sed facilis nulla aut rerum. Rerum illum ex in repellat quis ab ex odio nihil. Officiis dolorem qui non sunt molestias fuga suscipit dolorum et. Soluta tenetur voluptatem odit voluptas libero omnis est aliquam. Eveniet itaque et molestiae sequi maiores.",
                            Title = "Centralized responsive archive",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 12,
                            AuthorFirst = "Gabriel",
                            AuthorLast = "Schmidt",
                            Description = "Ut quo autem. Iure quos odit rem et consequatur a vitae sapiente ipsum. Soluta voluptatem minus est quae ut ipsam veniam dolorem nobis. Illum cumque sed nesciunt incidunt et aut corporis. Natus sed consequuntur et aperiam sit cumque recusandae et quo.",
                            Title = "Focused asymmetric benchmark",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 13,
                            AuthorFirst = "Julia",
                            AuthorLast = "Shanahan",
                            Description = "Sunt qui perspiciatis nihil. Voluptatem fuga aliquid sit commodi dolorum accusamus ad a. Dolores dolor dignissimos. Tenetur sunt fugiat blanditiis quam consequuntur. Accusantium ut quisquam quod perspiciatis debitis a excepturi vel. Commodi in recusandae est iusto ut.",
                            Title = "Reduced 24/7 projection",
                            isAvailable = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
