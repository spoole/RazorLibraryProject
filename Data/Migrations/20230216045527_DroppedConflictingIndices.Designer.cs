// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RazorLibraryProject.Data;

#nullable disable

namespace RazorLibraryProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230216045527_DroppedConflictingIndices")]
    partial class DroppedConflictingIndices
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "654313e4-aa45-450a-939e-c242549715cc",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b1f9f862-d433-4f4f-8e16-f496e529e2b9",
                            Name = "borrower",
                            NormalizedName = "BORROWER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2a1f2574-6eae-4e74-b7ed-ae2ee445a001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c9e7880-82d7-4fac-b2ba-0ba3a2faa60f",
                            Email = "borrower@library.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "borrower@library.net",
                            NormalizedUserName = "borrower@library.net",
                            PasswordHash = "AQAAAAIAAYagAAAAELi2mPOfbno5Sb9VD2h/LW2TdRJkCHoTvhjK0Yw1A765TyilGhEpI6qdY8U57nYdrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f211fe0-530a-4e50-a799-5c0c5234b1fd",
                            TwoFactorEnabled = false,
                            UserName = "borrower@library.net"
                        },
                        new
                        {
                            Id = "75e584fc-58b0-4082-82ed-e05f0cfbfc5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7955fc5-d0e6-432c-b2c0-59e8da47ff99",
                            Email = "librarian@library.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "librarian@library.net",
                            NormalizedUserName = "librarian@library.net",
                            PasswordHash = "AQAAAAIAAYagAAAAEENsF9QsapTdXSuDCyVcMshI9i62zg/7GXIAjO7LyTXdz6LWFbAde9cqmmWT2mNB8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fe38cc3-b1da-46d8-af86-8a3782be3e21",
                            TwoFactorEnabled = false,
                            UserName = "librarian@library.net"
                        },
                        new
                        {
                            Id = "2d13adae-9cd5-41b9-8e7b-8039fb436aea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1174a25b-acd9-458f-9418-449ebea73958",
                            Email = "guy98@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGEA0SBJnLDzt2GroGC2JspNXx29ymqty9VCk7QHNaW21Pd4YpvUdL/NS6m+enGUhA==",
                            PhoneNumber = "491.260.4628 x25164",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2d558b9-7521-4836-9e7b-58d6bac0cef9",
                            TwoFactorEnabled = false,
                            UserName = "Guy98"
                        },
                        new
                        {
                            Id = "63e8b31d-3e97-4898-a365-7179bbdae6e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c7dce75-6960-4add-95a6-ff31b8c087a3",
                            Email = "sally_conroy@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBJ8x/b25W17KBYziAAUcdyxz2gNo81EjtxqEX0haCkc9SyDZaFuVrzZGg97ZX/lzA==",
                            PhoneNumber = "1-748-935-2588",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "710ea91b-bea5-4b51-8b9c-019b896ea768",
                            TwoFactorEnabled = false,
                            UserName = "Sally_Conroy"
                        },
                        new
                        {
                            Id = "5abd030a-9a2e-436e-b9aa-7096804d7f9c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c64a4f83-d7de-49c1-9d35-2bc7918379b0",
                            Email = "marguerite69@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEVdkoews7yjZhzWDDVhZpqZd9BBIwHUkHAqLcRwMQyXEzLPgWT04qg0nEREbWwx3w==",
                            PhoneNumber = "(314) 543-0900",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e81dc16-7966-4740-965c-d8dc83ba23dc",
                            TwoFactorEnabled = false,
                            UserName = "Marguerite69"
                        },
                        new
                        {
                            Id = "5f303b56-994f-4aa8-892d-420e6343bcff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50f04c93-fbab-4d10-8c23-204baa755a78",
                            Email = "pamela42@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPnITyxGfHgoeaMcvPLnULeJbLXvul8XUl2EdrYnV64dCl29XFoRajgCb1OWzQfqDw==",
                            PhoneNumber = "772.534.8154 x86587",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe4e9a6f-6660-4c0b-aaee-555a95dc621f",
                            TwoFactorEnabled = false,
                            UserName = "Pamela42"
                        },
                        new
                        {
                            Id = "3a7ae8c8-a666-47cd-bc82-c6ad1f445018",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "335296d9-81a7-4048-a67c-96566b6f9333",
                            Email = "daisy25@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGewxH8qXAmwOf6ZK+iaQn05cXg7hf9BGG4VLMleAYwtAWR1+pU/Ire9tkvy+1fE3A==",
                            PhoneNumber = "(826) 741-9472",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d48ec9b-1e09-4d21-832f-dcc9cf205934",
                            TwoFactorEnabled = false,
                            UserName = "Daisy25"
                        },
                        new
                        {
                            Id = "96f678dc-b5fb-4f04-9760-b4445f5f7fcc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81abaa21-e8f9-40d4-a1a8-1187da2ac1ba",
                            Email = "eula.oconner62@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFaiFgt1HnQF9yH0RTzvJRt9izyL+FwQKo96R3vk0mtfvk4xAiDCceLW/HzWSlQQnw==",
                            PhoneNumber = "843-598-1308 x67577",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8ee111a-614a-4cae-9c54-c70cd5dd3621",
                            TwoFactorEnabled = false,
                            UserName = "Eula.OConner62"
                        },
                        new
                        {
                            Id = "9cce5578-b6f1-4508-9f2b-8b0dfabb2441",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a222cc1-4583-45c9-86fe-ce52a411f2ba",
                            Email = "sammy.dicki@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENaY+/r3iZpbumT5FJ/B27k49lSia6kRzbQ1aD9iidepjfUPbTOUEyBIKXAqTiBjKw==",
                            PhoneNumber = "497.351.4409 x4051",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44efc88b-86f0-44a0-a32f-cfaa8a74f5be",
                            TwoFactorEnabled = false,
                            UserName = "Sammy.Dicki"
                        },
                        new
                        {
                            Id = "62b23b3b-9931-4543-af7c-32e18b47539d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3fc749c-6216-4b8c-ab98-c15d7be7c21a",
                            Email = "judy_pfeffer10@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFOC1dX6Py5med4ClFQO88jDlS/BA4IjXZz3fn2E+BgfkW1S6FiXt4WnFU6TGnxWKQ==",
                            PhoneNumber = "890-911-2590 x802",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6256ad8-db5c-4c43-9518-c18b3044a6d7",
                            TwoFactorEnabled = false,
                            UserName = "Judy_Pfeffer10"
                        },
                        new
                        {
                            Id = "b8674337-ea1b-4888-99ef-57651b553367",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb1b2da7-f9d5-4c28-81ce-fc3dab6d39cb",
                            Email = "ron.bahringer24@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAkFLnBcUXz+a6cTv09mPtnosIyicmWtk2d/M7cEvYDGaJeHAC8v9BFNG3kjutF3Cw==",
                            PhoneNumber = "(987) 542-7030 x4587",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1033b07-cea5-4733-bec3-1468904ef5e5",
                            TwoFactorEnabled = false,
                            UserName = "Ron.Bahringer24"
                        },
                        new
                        {
                            Id = "e5d014d7-40de-48e7-91f8-3e817e1bc845",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24787854-4562-4a36-bb5f-bf15e8be7f53",
                            Email = "clinton13@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPLYgCZGt3bAoFumCJc64xBTUK0OykV+6HlOKX9ygNkXrdpd1ujKgtA/mt8WRTrpew==",
                            PhoneNumber = "(691) 443-6316",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d35b841-075b-4381-b9d3-b73dd4395291",
                            TwoFactorEnabled = false,
                            UserName = "Clinton13"
                        },
                        new
                        {
                            Id = "a0558f9c-7d49-4f94-a60c-c961a67bac95",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0de0467-94a6-47a7-ae3f-8213779d8713",
                            Email = "yvette.adams@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELav3ifgkcuN2iJOAv7kq+QB+KpWkIY44pSCn0DNIiRev6xgnPeVoEbChbVmXZzSLw==",
                            PhoneNumber = "1-801-381-7913 x0596",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac8bce37-0cd0-43b1-adee-15c09959cb97",
                            TwoFactorEnabled = false,
                            UserName = "Yvette.Adams"
                        },
                        new
                        {
                            Id = "b095b5f0-3971-40c0-8df0-09970e5b6aea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d272ac93-abce-41e5-b21c-96e8e7340598",
                            Email = "jennie_gorczany37@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEARl05k7NJuGgoxjW6I/atCtoPLCSIGQzZEupynJBLm6as9mMquCiTJM3XXcia+e7A==",
                            PhoneNumber = "(365) 435-6055 x7134",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "baa66eb3-c55b-4b50-8477-6a46ca7bb905",
                            TwoFactorEnabled = false,
                            UserName = "Jennie_Gorczany37"
                        },
                        new
                        {
                            Id = "e0db06e1-4165-41d3-a078-aff2343b48a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2de2629-f2db-4429-825c-2d9364efecf5",
                            Email = "loretta_ernser6@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEE3T7qnm/9kWgUAKVcuvnc2wqJVPR42PRZ/nM2joumKOAIFBLt1T3mqVVcNv7U7YJA==",
                            PhoneNumber = "531.585.3552",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39e98eb9-dcf5-490d-b367-fe1bc4f75ad7",
                            TwoFactorEnabled = false,
                            UserName = "Loretta_Ernser6"
                        },
                        new
                        {
                            Id = "9628aacd-0e09-4431-bbf8-788930459cc7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "345a3a6b-a123-4fc8-9d47-7bffd2e261e3",
                            Email = "ray_wisoky@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDnVFX8p1Rro12t7gNKB0rooPhOPcQV9JajWMlOM2Dku1Zr202RXZaIHdmooFifyAA==",
                            PhoneNumber = "912-840-3632",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5bef532-13cd-400f-97b3-6a9715acfff5",
                            TwoFactorEnabled = false,
                            UserName = "Ray_Wisoky"
                        },
                        new
                        {
                            Id = "5d4daaa1-02d7-4570-b9bb-32571136941e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "068bfe4c-631e-4898-b47f-42f765ad3fb7",
                            Email = "jose50@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGsWtorXBfp0Gte0Lh9kQ+BO0bwXcfYuW8VHhlEPnjYs6PN+jtHQL/upKvM/gLY7fw==",
                            PhoneNumber = "813-402-6150 x854",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "289275b8-5cce-45e7-b965-93a4e96be685",
                            TwoFactorEnabled = false,
                            UserName = "Jose50"
                        },
                        new
                        {
                            Id = "056f53ea-e872-405b-8ff5-bce8d30f6f9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e051d72b-c71a-42b3-8fc7-e30c9844efb8",
                            Email = "leah_windler34@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEN+XODmv93HmpTC5gghAvEcnT4it8eNdUxidfas53wQ4weG+DoODkDNwZhK+MJw/WA==",
                            PhoneNumber = "1-565-465-2580",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c3dfebb-79ba-4c3c-b0d3-03231c2b2879",
                            TwoFactorEnabled = false,
                            UserName = "Leah_Windler34"
                        },
                        new
                        {
                            Id = "f0b78923-ce49-49e8-af55-6a3b567b7329",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be48a1e7-c215-4344-8ab6-c086e015ae35",
                            Email = "samuel_bauch@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJqBdrFq1bordBrf6Aeyn0L9+XPnQPVfKdy3Kz3lCJjc7engeG0ZwykNduucNJOWgA==",
                            PhoneNumber = "1-405-658-4814 x10007",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ebd83ddd-9625-4161-9aa3-b0976c7568bf",
                            TwoFactorEnabled = false,
                            UserName = "Samuel_Bauch"
                        },
                        new
                        {
                            Id = "c7e56052-d51b-466d-a2d0-c67b8ae73d32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb253cbc-d723-4ba2-84aa-d0eeb2a55abe",
                            Email = "clara.zemlak@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDAelQ1Tcega13xmgeUSTfdnFf8ZOHtuMg8Hk3Z6vCw9B6Y/taDKqs560tsi77PV6Q==",
                            PhoneNumber = "972.763.6599",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d97c518-dd9f-41c7-942d-023b3a993b93",
                            TwoFactorEnabled = false,
                            UserName = "Clara.Zemlak"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2a1f2574-6eae-4e74-b7ed-ae2ee445a001",
                            RoleId = "b1f9f862-d433-4f4f-8e16-f496e529e2b9"
                        },
                        new
                        {
                            UserId = "75e584fc-58b0-4082-82ed-e05f0cfbfc5b",
                            RoleId = "654313e4-aa45-450a-939e-c242549715cc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RazorLibraryProject.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorFirst = "Angie",
                            AuthorLast = "Wilderman",
                            Description = "Autem voluptate dolorem cumque ea ut tempora explicabo est. Dolor vel consectetur dolorem dolorem nostrum eius ex hic dicta. Laudantium quam est commodi ipsa placeat quae enim qui. Minima itaque alias eius voluptatem similique et nam quia dolor. Accusamus vitae sed vel id. Reprehenderit ad aliquam.",
                            Title = "Face to face motivating initiative",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 2,
                            AuthorFirst = "Jon",
                            AuthorLast = "Jacobson",
                            Description = "Nobis enim et praesentium corporis rerum delectus sint veritatis. Dolor nulla in. Officia veritatis a accusantium a aliquam soluta temporibus ullam. Adipisci eius aperiam et voluptatem sed. Eveniet perspiciatis cumque dicta et. Esse maiores provident quia aperiam.",
                            Title = "Reverse-engineered scalable product",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 3,
                            AuthorFirst = "Kari",
                            AuthorLast = "Koch",
                            Description = "Molestiae qui non laudantium doloribus magni. Iste ducimus libero temporibus repellendus non ipsam in quibusdam. Ullam nostrum sed neque vel. Rerum quibusdam reiciendis ipsa enim et.",
                            Title = "Streamlined clear-thinking time-frame",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 4,
                            AuthorFirst = "Tomas",
                            AuthorLast = "Rohan",
                            Description = "Eius nihil dolorum voluptatum qui ut non et excepturi. Corrupti beatae voluptatibus numquam beatae unde voluptatibus rerum sed iste. Quis quis praesentium sed et quidem quod quo quibusdam.",
                            Title = "Assimilated multimedia forecast",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 5,
                            AuthorFirst = "Ed",
                            AuthorLast = "Cassin",
                            Description = "Qui aspernatur atque aut. Earum iure error odio doloribus. Accusamus et esse non consequuntur est laudantium. Dolor voluptas in qui est ut adipisci deserunt veniam deserunt. Consequuntur quo in aut sint. Quidem iste quisquam aut tempore ab debitis.",
                            Title = "Organized fresh-thinking middleware",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 6,
                            AuthorFirst = "Dora",
                            AuthorLast = "Walker",
                            Description = "Aut accusamus aut. In nemo ipsam hic consequatur. Quasi pariatur magnam. Et atque qui nesciunt est.",
                            Title = "Profit-focused mission-critical workforce",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 7,
                            AuthorFirst = "Felicia",
                            AuthorLast = "Cole",
                            Description = "Incidunt in sit a eum sed laudantium enim. Dolores est suscipit id fugiat sint fugiat molestiae. Voluptatem aut dolore maxime corrupti. Eum nostrum ut non eum cum sit eum. Inventore aut ipsa beatae dolorem blanditiis dolorum.",
                            Title = "Monitored disintermediate array",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 8,
                            AuthorFirst = "Ira",
                            AuthorLast = "Heller",
                            Description = "Itaque enim expedita voluptatibus. Enim molestiae aut omnis magnam commodi. Omnis omnis totam ipsa id. Quia eveniet consectetur. Assumenda quo nihil necessitatibus maxime qui quod harum excepturi.",
                            Title = "Open-architected multi-state middleware",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 9,
                            AuthorFirst = "Lorraine",
                            AuthorLast = "Hoppe",
                            Description = "Quibusdam modi at veritatis aut sapiente recusandae. Inventore at et. Neque omnis id autem. Quo est aut exercitationem molestiae voluptas. Doloremque numquam laudantium est eum soluta et.",
                            Title = "Pre-emptive encompassing data-warehouse",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 10,
                            AuthorFirst = "Shelly",
                            AuthorLast = "Thompson",
                            Description = "Voluptatibus possimus blanditiis vero. Et possimus qui laborum alias quaerat. Esse incidunt labore quia reiciendis vel harum itaque.",
                            Title = "User-friendly multimedia groupware",
                            isAvailable = true
                        });
                });

            modelBuilder.Entity("RazorLibraryProject.Models.LibraryAccount", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("roleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("roleId");

                    b.HasIndex("userId");

                    b.ToTable("LibraryAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RazorLibraryProject.Models.LibraryAccount", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "role")
                        .WithMany()
                        .HasForeignKey("roleId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("role");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
