// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RazorLibraryProject.Data;

#nullable disable

namespace RazorLibraryProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230215020353_NoMoreGhostsPlease")]
    partial class NoMoreGhostsPlease
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "24cc33c0-6820-4d09-8c7b-9761df7ba486",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9867fdd7-a24b-4851-ac6e-52763bd99ac7",
                            Email = "becky_vonrueden@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJbXFcIhgRYH204QxWbKmPR6RxFfBUDuemxqOnR4TxNF+DMLHErEUZZz4sdhhjvIog==",
                            PhoneNumber = "390.544.6998 x6318",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27e19836-4828-4d4d-bcd2-1bbe09ba35f7",
                            TwoFactorEnabled = false,
                            UserName = "Becky_VonRueden"
                        },
                        new
                        {
                            Id = "484028fe-a5b6-4819-9b3a-02c595fde962",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94a71e28-7f5f-4254-9f37-d102f08ba049",
                            Email = "vincent55@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGMSRKNkSzMUYfJu+nRV+Ef9/0iegCntRAsL/0+E6z8eb0aMutfFV9mMHUZGwsvsrQ==",
                            PhoneNumber = "(755) 439-2329 x52642",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "030740ba-786f-47ed-a4ef-d7a6703a23c1",
                            TwoFactorEnabled = false,
                            UserName = "Vincent55"
                        },
                        new
                        {
                            Id = "2ac2140a-de53-4ac5-bd54-e95f69cafd50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11a4722d-6a0b-4385-bec4-92def4416bb8",
                            Email = "blanche_nolan5@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGmri9NLfuXmFBQyZNkgPhDE2j6Zut/1nv9Z7eLhpD28+nSW5gQKtOGQm4sCD4oRHg==",
                            PhoneNumber = "823-289-7878 x880",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52a68718-755a-4c4e-80f1-55cfcda4b4b1",
                            TwoFactorEnabled = false,
                            UserName = "Blanche_Nolan5"
                        },
                        new
                        {
                            Id = "4fb25888-ba86-4f10-bf6d-3c1d2b2984d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "655160e1-892a-49e7-88a2-158db5add6db",
                            Email = "ben.moore79@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOsCWrLla8nV1vab51wrqoojQTPwddxWxWSApd8jh1oGPvsGZdq6W1v9aS1KuClk3A==",
                            PhoneNumber = "440.371.4783",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6003113-38ce-4d5b-85be-09e50476de1a",
                            TwoFactorEnabled = false,
                            UserName = "Ben.Moore79"
                        },
                        new
                        {
                            Id = "4f1e3218-de03-49e6-8b67-13c33f61050f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "867b734c-9317-4178-9a34-9a122ff2b6dd",
                            Email = "alan40@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECJ/zTGsTc8O4ebJO860i6Vg7PfImCjWDaXZflELCr+iHiu25yeEO1w/PJUBxxr2hg==",
                            PhoneNumber = "1-975-322-6972 x7598",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ea12f46-918f-445a-afd2-ac4712baa768",
                            TwoFactorEnabled = false,
                            UserName = "Alan40"
                        },
                        new
                        {
                            Id = "8315f3d2-5953-4402-aa93-57038429b1f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69ed0e3d-4b1a-447f-b9fc-4c4878b92e33",
                            Email = "hilda_casper69@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEF8dyPVTVWJIFXJ88t3cboriGww6NsoCmmv8Q8Ww8Ib9B56tnoqIZ5YQLUlLPcFTMA==",
                            PhoneNumber = "434-232-0195 x119",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1deec16-c317-468f-b148-efdef7069710",
                            TwoFactorEnabled = false,
                            UserName = "Hilda_Casper69"
                        },
                        new
                        {
                            Id = "114f9549-9103-41d4-91f4-52abe60d2ae8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c48bc8ff-d3e4-42a0-a9da-3ab6d641959f",
                            Email = "lauren.cruickshank@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJpi2tWpPwGTqhZYAUMPmhfHiSYTbOFvWYGQybJVBus3A0T44BzE/h/LBp5O6Vbd0g==",
                            PhoneNumber = "434.989.3486 x158",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "390459a5-1642-4e22-9ef9-6a825640292e",
                            TwoFactorEnabled = false,
                            UserName = "Lauren.Cruickshank"
                        },
                        new
                        {
                            Id = "7fa86faf-7eef-4bd4-b393-34bb37cc7a69",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3f8305d-6aea-4560-a4ca-c4bf7d7ac797",
                            Email = "cecil_considine95@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEB7lNfs0heDl/r4J9gkEWLgT7OWPSQzikHONEGUP+uerX3Am09ngn3O10TrToma8uw==",
                            PhoneNumber = "1-870-328-1863",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee36cbf8-6449-466d-bddb-5d244cc004a1",
                            TwoFactorEnabled = false,
                            UserName = "Cecil_Considine95"
                        },
                        new
                        {
                            Id = "7b958d71-e1a3-4484-bfd9-1545f723585b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bffb06a9-30b3-43b2-a602-8aac9c1e317f",
                            Email = "wendell_wintheiser63@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBukSpdZuVnEx1RNUQDbeaHl1icDy8IvLRuC5L9vLEedz7vDLxFO7oO33Z6zxB7QIA==",
                            PhoneNumber = "540-803-2208 x46238",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a28f1801-dfca-4c60-97c8-53c828eae86e",
                            TwoFactorEnabled = false,
                            UserName = "Wendell_Wintheiser63"
                        },
                        new
                        {
                            Id = "605068e9-943a-4a08-9134-212d18f17cb5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "873f1d6d-389d-448c-811b-222937f15204",
                            Email = "rosie_ullrich85@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELqtoLX2SHqNv662pPYNbo8z+4uqsh2G+kroKM/uyF0uT+/Fzyo1bamXzV7kKIFTDg==",
                            PhoneNumber = "(407) 385-9605 x001",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edd69487-e936-4aa8-aab1-c781d6ba2f72",
                            TwoFactorEnabled = false,
                            UserName = "Rosie_Ullrich85"
                        },
                        new
                        {
                            Id = "9061f5d0-bc44-4dc7-a665-34f54f113539",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97a45bc9-c042-44de-87bc-21bc55b1627b",
                            Email = "andres.moore62@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGwpVNZS8LyfDsyKLLIOoC8dbkzKuS9ZuXnXoVNWt5+Ji296ZPcdq7DkB59LnjYhKQ==",
                            PhoneNumber = "1-752-836-6199 x8050",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0646a600-3f6b-4675-802b-cf0333b7a461",
                            TwoFactorEnabled = false,
                            UserName = "Andres.Moore62"
                        },
                        new
                        {
                            Id = "17b06963-6c27-4773-8da1-7432efde4427",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "959d584d-fd84-4ef1-80cd-3c820e9ea927",
                            Email = "wesley.mann89@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJukhMKlPC+/eTR45XWywWyNBY0npaJ1HGAhfVteVqvFs0qSW/7gauh2ryrSPm/cPQ==",
                            PhoneNumber = "1-247-835-0480 x1035",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e9d8c92-22d4-4684-9ecb-bae113a9ec65",
                            TwoFactorEnabled = false,
                            UserName = "Wesley.Mann89"
                        },
                        new
                        {
                            Id = "534492f1-4122-4b1c-9777-db7117eedb18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cdbd1de-81a2-4ee2-b692-b67471cba7a4",
                            Email = "mark.lemke38@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJ7xSRvuNwYZiFfWmmqZd4YZFEujPbTOTXJh3bUIwd1hmDABBbBMYARC8gKbQ/WGtA==",
                            PhoneNumber = "638.816.6911 x62725",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5453d154-e6b4-4365-97ad-a0a5860bef22",
                            TwoFactorEnabled = false,
                            UserName = "Mark.Lemke38"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RazorLibraryProject.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
