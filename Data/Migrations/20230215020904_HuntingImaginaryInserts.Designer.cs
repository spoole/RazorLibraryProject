// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RazorLibraryProject.Data;

#nullable disable

namespace RazorLibraryProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230215020904_HuntingImaginaryInserts")]
    partial class HuntingImaginaryInserts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9a125338-b10c-465f-b06d-a1ab264de028",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "479362e6-fb01-4d8f-b111-867cb47d972a",
                            Email = "ernestine_walsh0@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJic6yypAS/ezy0f6SdWaiZJtpSMqVn8nOCW9gt/EVUOVc873Hnrdpv6bFph3odFtQ==",
                            PhoneNumber = "1-228-722-4275 x67263",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f1239f2-5fb0-48ef-8202-afd4f30a6b4f",
                            TwoFactorEnabled = false,
                            UserName = "Ernestine_Walsh0"
                        },
                        new
                        {
                            Id = "caa84dc0-9bd7-43e2-9ced-d34a11bc3916",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f62491a-01bc-407b-b2b8-b09821268e44",
                            Email = "gregg.donnelly@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECwobOd6SRxHcjWTthvbhc3SGWzpBXWGY6punuksDQSzydY0zrRbW+WRtdMx98Fo6A==",
                            PhoneNumber = "302.516.5766",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f7f9c69-053d-4973-be1c-897d83db995c",
                            TwoFactorEnabled = false,
                            UserName = "Gregg.Donnelly"
                        },
                        new
                        {
                            Id = "56518bd2-bf5b-4ab3-8f60-ad8bb78eb078",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "997e4eb6-6284-4654-b84b-25c2d7b2e522",
                            Email = "scott72@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAzkHagWFh9F9wFkQDv+/wyW3GWuGT6PsSh1CDQsnfY/tUsrO94Pf+1ADZoSt7zOPQ==",
                            PhoneNumber = "727-353-0733",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c74944c5-a366-44c2-8926-b084225fa486",
                            TwoFactorEnabled = false,
                            UserName = "Scott72"
                        },
                        new
                        {
                            Id = "d66ef5e6-7588-4e9a-abe6-605fd3ba9d0e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa3b001d-cb4d-4e5a-a720-6630229377d9",
                            Email = "roosevelt.marks@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJxtRTmTxEs1IFtILw/eIdFUoaBnQv0YyJdMa+oceSrKMuiFrv6XmuLVlgqsFnWo+w==",
                            PhoneNumber = "(218) 947-2945 x80964",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7e4ccff-9f31-4ed4-822e-002a12bf612a",
                            TwoFactorEnabled = false,
                            UserName = "Roosevelt.Marks"
                        },
                        new
                        {
                            Id = "2ff860db-e736-4cf7-9eab-943afce41d82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d388f2f4-c47e-4aaa-989f-e8ec0a1c3992",
                            Email = "sam.beahan@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH8uRPK2lI6tolQHJNdtb6KIOEtvr1VqF6oShhsjsNU2X1cYAMs5gI67pbd7KMxRFg==",
                            PhoneNumber = "536.919.7964",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae8a1248-356b-4f83-ac47-d8dd9a4638bf",
                            TwoFactorEnabled = false,
                            UserName = "Sam.Beahan"
                        },
                        new
                        {
                            Id = "1c8e7bda-f7d6-46c0-9d87-abeb5af71e23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3791e341-2149-4ec7-be8c-14be949e108f",
                            Email = "olga.collier24@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBrd8l5LUdsucGCNmLRd3SFpQnQtd4VgAoPaD3YUZ1FJWub9WOs6bthbUhug/7uTJg==",
                            PhoneNumber = "(462) 843-3722 x68925",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05d8a12e-ba01-42b4-bb1d-0296a54277d8",
                            TwoFactorEnabled = false,
                            UserName = "Olga.Collier24"
                        },
                        new
                        {
                            Id = "b70eb3a7-15e0-49f8-91f5-55635a8b0bd9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30671ecf-7ee2-40d5-bf45-cf231e81ea98",
                            Email = "jimmie31@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFKDS8/hBpOMAt/67ZNEJPQdDXrfmGLsNUHhGTq0ElsCzYTw90a9VeU6O5qRD0XmSg==",
                            PhoneNumber = "668-216-2545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15db1927-b5fd-4866-a8dc-52348c1641fe",
                            TwoFactorEnabled = false,
                            UserName = "Jimmie31"
                        },
                        new
                        {
                            Id = "ef9e4561-d07b-4426-893e-41f77acb19ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88e7bfdc-bada-4854-a2d3-7dcb951aa930",
                            Email = "steven56@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBMlGfcwSTxxLjEAZvLtnpvffE0SFClJp3+oyr5YcvHGr+Rh7lFMiwtqB62WzDPsKg==",
                            PhoneNumber = "1-530-782-2707 x5227",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03ab1b94-896c-4344-9409-060c8589d24e",
                            TwoFactorEnabled = false,
                            UserName = "Steven56"
                        },
                        new
                        {
                            Id = "935f0f58-53bd-4e65-8881-86eb3307350e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "255de3bc-f23a-41c6-8bc0-829947ba9c1b",
                            Email = "sean_simonis83@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDQiux+17CJ2Q8Og6MzxX91uTKOf2imjWdSPluIbQiFOef3jRViOEp13/kPYyWEs9w==",
                            PhoneNumber = "835-983-7616 x355",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a75a2fd0-506c-4218-be14-b0977bddc215",
                            TwoFactorEnabled = false,
                            UserName = "Sean_Simonis83"
                        },
                        new
                        {
                            Id = "e92fc800-dcbb-4065-81f7-f9fd7e67be3a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf3863e4-0391-4b79-ba28-9557f06ab97e",
                            Email = "patsy_blick26@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELSNExJF7ocnfgJGFHK/u19gSskKltDB+TIapIGdQdL6O5IvwmSX5swd6pm5Z8FjNA==",
                            PhoneNumber = "(844) 878-9988 x9728",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91d8d6ca-190c-431d-a6a8-2261b402616a",
                            TwoFactorEnabled = false,
                            UserName = "Patsy_Blick26"
                        },
                        new
                        {
                            Id = "2b465f84-28db-426b-8fc7-316b248ac687",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf55bb2c-68af-4bbe-aca5-b8248ba688b2",
                            Email = "maria_gusikowski@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAED/O+2iCdLPjcq/IdeHz6R0U5vMpWUMYfYia2794FljLcgJH05dBsP5CX8OW/cOoqw==",
                            PhoneNumber = "(225) 947-0437 x323",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16a12a7c-9a9d-4e5f-ac0b-f9af54da89f3",
                            TwoFactorEnabled = false,
                            UserName = "Maria_Gusikowski"
                        },
                        new
                        {
                            Id = "5d172fc9-ca48-4bea-9e42-b9f53cb13da8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3254d8d1-7a19-4b48-ac96-95d9bfdf9de4",
                            Email = "alberto_monahan@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEK+s8Fbsmex4ivrbPUJ4lcZoC6MPuQiUDe5rNEpK4DAF9MQfz7GTfoSa2xNweSgTuQ==",
                            PhoneNumber = "(654) 446-7490",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51bda9a2-2135-4a2a-822e-4a2d37823c8c",
                            TwoFactorEnabled = false,
                            UserName = "Alberto_Monahan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RazorLibraryProject.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
