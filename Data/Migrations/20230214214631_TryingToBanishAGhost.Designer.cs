// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RazorLibraryProject.Data;

#nullable disable

namespace RazorLibraryProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230214214631_TryingToBanishAGhost")]
    partial class TryingToBanishAGhost
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "358009c4-8400-4173-9de5-9633cfd6c572",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbd8ef57-0a57-4497-a844-022025bb50e5",
                            Email = "borrower@library.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "borrower@library.net",
                            NormalizedUserName = "borrower@library.net",
                            PasswordHash = "AQAAAAIAAYagAAAAEGoEtuGnGTkRN6gi7RvNSBMh1MLDxyUqXZhX4PxfnheWCiu9TS30vQqyI/JMUNRHcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2e4ec34-7362-4d32-868f-409ec2af8b78",
                            TwoFactorEnabled = false,
                            UserName = "borrower@library.net"
                        },
                        new
                        {
                            Id = "73f66cba-1235-4c7e-b6c2-c2fefc313c02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9eefd121-81af-49eb-a037-d04ea8c80fe8",
                            Email = "librarian@library.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "librarian@library.net",
                            NormalizedUserName = "librarian@library.net",
                            PasswordHash = "AQAAAAIAAYagAAAAEEPGCuglh19MtGYZ4TBThehRlL/Q7pdSLuRINJrNddStrY3Z1r8S8qIKB+MsBHa/+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "407cccfb-9703-4c2a-9af4-2718ca7669b0",
                            TwoFactorEnabled = false,
                            UserName = "librarian@library.net"
                        },
                        new
                        {
                            Id = "0ad53729-1314-46d3-8f4f-2fa499525c91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3400202-35b8-4345-8fdb-7ae4c7acf953",
                            Email = "dewey.gleason14@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOwRJVIuQl+TOvJ1oVcL3trBZ4PdJvKc6cv5PEbB7aQqoSD6gXY0Q+Gy/ZUa+gkqog==",
                            PhoneNumber = "778-371-2138",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49d888c4-8312-44c6-a472-013b9340c5cb",
                            TwoFactorEnabled = false,
                            UserName = "Dewey.Gleason14"
                        },
                        new
                        {
                            Id = "904bb7b5-f858-4843-bd13-356cc7759cac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4134d6b4-dbbc-474c-b850-1f8da24eeea7",
                            Email = "mamie.ward26@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEDJlWEqURGdfNdTVj7I/u2RgyGNkClW6ZOj4J7oC7TPZ7tKoc0vBFpyZnkXtNAQZQ==",
                            PhoneNumber = "275-663-5290",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca1f4dca-094f-4ce0-9a25-4bd5a4416115",
                            TwoFactorEnabled = false,
                            UserName = "Mamie.Ward26"
                        },
                        new
                        {
                            Id = "d3db598e-ce24-400f-93ba-11201eb12dbb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8c391c3-b121-4637-9319-2f1d424ecc6d",
                            Email = "wilson_hegmann@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDfINMW87lnjTeMomhUecHS8bFJt6ZoYgCdUxREuTYufH9CB5WXo2mOz28EKPjWntQ==",
                            PhoneNumber = "(492) 785-7142 x9850",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d847c9d-9064-40e6-ab8b-cc24525343de",
                            TwoFactorEnabled = false,
                            UserName = "Wilson_Hegmann"
                        },
                        new
                        {
                            Id = "7dee2f60-9809-47ca-ab37-d86286eb8f87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "420ea4e0-1a9e-4125-a7d2-ed82bdf18e45",
                            Email = "jean24@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDSwUVgRKTR4uZrlEg7YcEF5JIY75s/3V3pRQPjVu+2whq3seFHzcY5ecn+BDHGMUA==",
                            PhoneNumber = "872.846.5181 x753",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a333e57-fe4e-437f-86c9-594b0691312a",
                            TwoFactorEnabled = false,
                            UserName = "Jean24"
                        },
                        new
                        {
                            Id = "a8203c88-3cd7-4234-be61-f2f74c4083bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73eee3d3-c8fd-4d26-a3f8-88571ceec6eb",
                            Email = "tina.torp@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEmrAHju11boZ5Kp5l0vSL+LRwKBIXXlkS44Yera2Pr+Yf1UcdK7vdd+SE/1iH8+0A==",
                            PhoneNumber = "708-923-6449",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae0da6fc-2ef5-4c49-98e5-ad8b3e707cbb",
                            TwoFactorEnabled = false,
                            UserName = "Tina.Torp"
                        },
                        new
                        {
                            Id = "7528a3d9-f7c7-407d-bd92-0113ddf0eaf2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe486823-44d7-4ee4-bc42-7259cc379d90",
                            Email = "randy_hand@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHcSgjmSDt7fz9Qi4ZzsS6F1XOrxqU2/d5aGaLnzeV2AWcnWtKbxJ6RdbAQhOVnZOQ==",
                            PhoneNumber = "1-835-926-0521 x17363",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b690fff-7f49-42e5-b170-67aa6e5b1353",
                            TwoFactorEnabled = false,
                            UserName = "Randy_Hand"
                        },
                        new
                        {
                            Id = "bc7a0ded-9f75-4962-b6c6-2ab9d1025fd2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9931e34-0aec-401f-9079-3c7ab481fa13",
                            Email = "virgil.keebler@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKFqIWL4XMJoERnx2VIDe4/6jtRVycvjVjacLNo+0qjJXeGe9gkIPLg+TyGrk5MFUw==",
                            PhoneNumber = "1-888-552-8394",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc1fb45e-fc40-4034-a5b7-e9d52cd389ef",
                            TwoFactorEnabled = false,
                            UserName = "Virgil.Keebler"
                        },
                        new
                        {
                            Id = "f876f6fa-e106-417a-a3ba-326c9d4c9352",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b38091c-64d1-4b86-9c86-d66b81e9b21e",
                            Email = "felix5@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEI5UUFw51W/jlygKfUz3+PBOt7Euskqo0CtEpeF5wz9l7056UJmZwEnxPfvAl/5ZAQ==",
                            PhoneNumber = "(956) 712-4170",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f77a6c10-b004-4b75-bda0-a98fdc929bb0",
                            TwoFactorEnabled = false,
                            UserName = "Felix5"
                        },
                        new
                        {
                            Id = "ba094d66-cb8a-4abd-9236-a8df21d5e794",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af7f286a-ea65-4db0-8b36-da8c9be2ac23",
                            Email = "jody_quitzon8@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELBGVF8oWfjvuyVfmyXim4S6xxSgJRXE0fyqiqxkbMk2uoflNLwmpA6EcIt4ch/3PQ==",
                            PhoneNumber = "994.315.4592",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79f8cbe6-1672-43c9-bd92-934f7103c262",
                            TwoFactorEnabled = false,
                            UserName = "Jody_Quitzon8"
                        },
                        new
                        {
                            Id = "f2f361cc-080a-47b0-a558-8d7712200c72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4d7fa20-2648-4709-a703-34cf181a5fa6",
                            Email = "myra.hauck@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPKstFtdBNzmO5R2X8p2coD4A4AjC6nJ2NiiJ9ybjN2JtB9hSmwIr/JVLOV/nwsykA==",
                            PhoneNumber = "205-893-6991",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6eb2778a-e0fd-44d2-b9c9-271be10c3ad7",
                            TwoFactorEnabled = false,
                            UserName = "Myra.Hauck"
                        },
                        new
                        {
                            Id = "e3298230-9ef8-40da-abbe-693baceb37d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d2197d6-3b5e-4850-9c50-469b0d0a300b",
                            Email = "eleanor_conn@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDmE8GudwpfuPo0lBWzVxcDYssZn8qhts5+nKuu8tgrzey+BbM0tauPlJE3d9bn+HQ==",
                            PhoneNumber = "(422) 841-6168 x1086",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19b1ba85-a496-4824-9b1e-ee72d8754007",
                            TwoFactorEnabled = false,
                            UserName = "Eleanor_Conn"
                        },
                        new
                        {
                            Id = "1da45ebd-49ab-48c9-b268-787dd2497da2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6515130d-40dc-4de9-9010-73db48ef42c7",
                            Email = "flora_bins27@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOMJpPd/gx8psGM+RE/Hyx4PhWwcSH1P1RUmfZ3GaKHs8RA9eWmU8jrKFGcORKn60A==",
                            PhoneNumber = "647.665.0465",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b71508f5-6c6c-4481-ae6c-a940fd3f2c9d",
                            TwoFactorEnabled = false,
                            UserName = "Flora_Bins27"
                        },
                        new
                        {
                            Id = "2ff78f33-a346-4713-9891-25c2b20a9176",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8b7f011-6816-428b-90f7-c16ab8515cb0",
                            Email = "paula_runte@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKiFYSJIAYP3KA5a/bgH/+SiRllI7IB3O+P4hkQfO0BeJjZWVoCeve/3xsuC+XddAw==",
                            PhoneNumber = "792.956.5367 x242",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43b8f783-a702-4971-8a38-f81e705589ca",
                            TwoFactorEnabled = false,
                            UserName = "Paula_Runte"
                        },
                        new
                        {
                            Id = "58dcc74c-6e31-422a-a07b-aa3bed7f479d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6746b18-c177-437a-a799-e229c5092197",
                            Email = "omar22@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKrwx6iHIrpGlYJWFyfolTH8S0iLVIP9w5hVZkNOLzEt4e7ccpQA4s+fr20hdbaRtQ==",
                            PhoneNumber = "593-443-9525 x78602",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66b08b06-f6f2-4bdf-b916-e69e8d3d940f",
                            TwoFactorEnabled = false,
                            UserName = "Omar22"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RazorLibraryProject.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
