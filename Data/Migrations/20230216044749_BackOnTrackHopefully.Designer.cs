// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RazorLibraryProject.Data;

#nullable disable

namespace RazorLibraryProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230216044749_BackOnTrackHopefully")]
    partial class BackOnTrackHopefully
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1c704a00-2d23-4d68-8c00-10ed0bd45b3d",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "208788c4-b855-4a52-9b47-074e473e811b",
                            Name = "borrower",
                            NormalizedName = "BORROWER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "020f3518-f66a-4e6b-93bb-71871b2e8624",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f46a29f0-0fa0-45c0-bf3a-be834deb9a30",
                            Email = "borrower@library.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "borrower@library.net",
                            NormalizedUserName = "borrower@library.net",
                            PasswordHash = "AQAAAAIAAYagAAAAEM9/HT9I/48kWpiqb5FWUXamuG8MnABnld4TgUtrOD0lEPKHYBLgNBUHs/aNOBDu3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9e8a802-0d35-40eb-9d12-ac813d532bdb",
                            TwoFactorEnabled = false,
                            UserName = "borrower@library.net"
                        },
                        new
                        {
                            Id = "47c020aa-0d7d-4f32-b22e-67c274cc428d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed46e279-ed63-41d9-b920-893be133c267",
                            Email = "librarian@library.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "librarian@library.net",
                            NormalizedUserName = "librarian@library.net",
                            PasswordHash = "AQAAAAIAAYagAAAAEJEnLIi0NqmoPM078UfejQgAD0hjqN0TL4wBZH9mZt6A1dbGu5qayOU5K+TuCMIngw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42d685d6-35a4-4e54-adce-1593d8c0302d",
                            TwoFactorEnabled = false,
                            UserName = "librarian@library.net"
                        },
                        new
                        {
                            Id = "128a952f-c8d4-45b9-b756-2904e095988a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98895249-3422-4268-9d20-f40962a26b66",
                            Email = "ginger.armstrong@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEP/wKD9NdafptG+kejHKLqx0mCVOgF27rRVZIa4Wk2/HKn5Nowumq32KWTN+udqLnQ==",
                            PhoneNumber = "1-835-764-2094",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b9d41da-6fce-48bd-bde5-177f965215e2",
                            TwoFactorEnabled = false,
                            UserName = "Ginger.Armstrong"
                        },
                        new
                        {
                            Id = "435ee2c6-0ce6-4c70-929a-09d5f4ae41d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "730eeaee-399e-4b02-a31b-971553c2e227",
                            Email = "malcolm17@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECA4K+0Nj9TmwrJAkVaAN91GpgFryQE2dSbtTzPS1ebUcIu6Z5nWsM41nz0VkwdwRg==",
                            PhoneNumber = "491.321.6745 x474",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29e489f8-187b-4fcd-bd9d-53e9399d03a1",
                            TwoFactorEnabled = false,
                            UserName = "Malcolm17"
                        },
                        new
                        {
                            Id = "5d2da35f-5ec4-446b-a2a5-a2eed2cd1846",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9cb9812-b1f4-45b4-a720-8f28bf6b1410",
                            Email = "glenda.considine71@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEK61oNQ3INwAduZY3SLMIi3+WK1Ywoo96UXNfKoVVyII+yycRdk3OH0WdMDQOKPaQg==",
                            PhoneNumber = "(975) 958-6841",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49a772aa-204e-4808-a181-3ec4aeef8369",
                            TwoFactorEnabled = false,
                            UserName = "Glenda.Considine71"
                        },
                        new
                        {
                            Id = "a39a302a-47ef-4500-b4e7-8fdd0c2a742e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82435aeb-b4aa-47a5-8e5f-d23b05445e10",
                            Email = "ira1@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENSvtZ447afkyTFKdY/jc7ndfYxdH3AH4sh4TMBFtCvHH/rZla+tArxO89pn0fHWJw==",
                            PhoneNumber = "(221) 353-0688 x977",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45c2d886-2c47-4ddc-98cd-29f4b92fc369",
                            TwoFactorEnabled = false,
                            UserName = "Ira1"
                        },
                        new
                        {
                            Id = "c98456c5-6259-4b35-a771-1315fa15145f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adc5f328-b3fb-4498-a898-28a678ad3b15",
                            Email = "cory46@library.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEExy5SRfOkUuHYYmovMVCjvzRPDM+mB5bl/KDXNPpTMnnCrH7vMWN1ciCwbtIF8WGg==",
                            PhoneNumber = "529.713.2363",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "430d4909-da9d-4ddf-922d-6efe3ad31c3e",
                            TwoFactorEnabled = false,
                            UserName = "Cory46"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "020f3518-f66a-4e6b-93bb-71871b2e8624",
                            RoleId = "208788c4-b855-4a52-9b47-074e473e811b"
                        },
                        new
                        {
                            UserId = "47c020aa-0d7d-4f32-b22e-67c274cc428d",
                            RoleId = "1c704a00-2d23-4d68-8c00-10ed0bd45b3d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RazorLibraryProject.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorFirst = "Dale",
                            AuthorLast = "Stiedemann",
                            Description = "Molestiae porro earum nihil ut omnis quas voluptatem explicabo. Nemo ut voluptate esse voluptas reprehenderit dolorum esse. In ratione soluta nisi aut vitae aperiam dolorum praesentium. Facilis est quia rerum. Veniam eius pariatur sit labore.",
                            Title = "Face to face cohesive database",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 2,
                            AuthorFirst = "Janis",
                            AuthorLast = "Kertzmann",
                            Description = "Facilis voluptas ad perferendis explicabo consequatur dolores delectus voluptatem. A vel libero ab non. Qui eveniet necessitatibus facilis repellat illum molestias. Id rerum exercitationem fugit corrupti. Iusto beatae ab ut. Corrupti voluptate aperiam temporibus in omnis qui quis dolorem.",
                            Title = "Diverse secondary database",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 3,
                            AuthorFirst = "Raymond",
                            AuthorLast = "Funk",
                            Description = "Commodi inventore expedita est non est deserunt maiores pariatur. Possimus cupiditate et quos expedita ducimus laborum ab magni. Voluptatem et illo quo placeat voluptatem. Dolor similique id voluptate et.",
                            Title = "Adaptive intangible moderator",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 4,
                            AuthorFirst = "Damon",
                            AuthorLast = "Rowe",
                            Description = "Quo odit et ipsum et. Praesentium voluptas eligendi eveniet ea incidunt dolor officia. Facilis quisquam aspernatur quod neque. Inventore eius voluptatem aut.",
                            Title = "Innovative 24/7 support",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 5,
                            AuthorFirst = "Rafael",
                            AuthorLast = "Schroeder",
                            Description = "Ut et voluptatem accusantium. Ut aspernatur ipsum. Quia et consequuntur similique aut accusantium reprehenderit quasi. Velit atque nemo ex nihil tempore accusamus aut. Cupiditate quae impedit nemo earum vel doloribus ipsa. Officia esse non aliquam similique incidunt.",
                            Title = "Phased national system engine",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 6,
                            AuthorFirst = "Joann",
                            AuthorLast = "Torp",
                            Description = "Ad quidem et aperiam excepturi nesciunt exercitationem. Incidunt illum dolores ut sed animi dolores consequuntur sed explicabo. Sit magnam aspernatur fugit quia. Eum consequatur quas. Veniam perferendis assumenda molestias qui omnis. Aut aut sit.",
                            Title = "Right-sized attitude-oriented process improvement",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 7,
                            AuthorFirst = "Debbie",
                            AuthorLast = "Fritsch",
                            Description = "Corrupti similique est consequatur inventore nulla. Inventore et est. Modi et harum iusto deserunt. Nemo in impedit eligendi ut neque culpa iure. Ab dolore enim molestias et harum velit beatae.",
                            Title = "Reactive explicit success",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 8,
                            AuthorFirst = "Dallas",
                            AuthorLast = "Hermiston",
                            Description = "Voluptas expedita animi occaecati reiciendis temporibus doloribus. Et ipsa minus tenetur earum modi. Quia sed praesentium quidem laboriosam voluptas dolorum aut.",
                            Title = "Synergized web-enabled policy",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 9,
                            AuthorFirst = "Jaime",
                            AuthorLast = "Veum",
                            Description = "Nemo quis labore eveniet soluta. Est ex fugiat corrupti placeat numquam perferendis ipsam accusamus. Dolorem et non quisquam soluta consectetur voluptates repellat. Consequatur qui voluptatem. Reprehenderit expedita omnis nam qui ullam voluptas nemo. Est quia laborum voluptatum sint quidem at.",
                            Title = "Automated discrete frame",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 10,
                            AuthorFirst = "Marcia",
                            AuthorLast = "Hamill",
                            Description = "Voluptatem est rerum exercitationem omnis quia ad animi dolorem. Enim dolores voluptas ratione reprehenderit quia deleniti deserunt hic. Repudiandae quae dolores possimus aliquid eos. Quae dolorum enim iste quis et soluta deleniti. Quasi et cumque molestiae ut veniam non voluptatem doloribus.",
                            Title = "Versatile interactive contingency",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 11,
                            AuthorFirst = "Rufus",
                            AuthorLast = "O'Conner",
                            Description = "Distinctio alias et reiciendis eum officia. Dicta ea nesciunt dolor dolores eos voluptatem. Ducimus nulla impedit recusandae animi et omnis dolores magni.",
                            Title = "Compatible multimedia flexibility",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 12,
                            AuthorFirst = "Randy",
                            AuthorLast = "Muller",
                            Description = "Vero dolore assumenda minima voluptatem ut hic officiis similique natus. Molestiae facilis voluptatem. Excepturi quos quod voluptas unde.",
                            Title = "Advanced multi-tasking strategy",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 13,
                            AuthorFirst = "Mona",
                            AuthorLast = "Mosciski",
                            Description = "Praesentium dolorem enim sunt. Dolores eaque quisquam architecto est voluptatem reiciendis nostrum. Inventore impedit ab voluptatem numquam omnis.",
                            Title = "Progressive 24 hour frame",
                            isAvailable = false
                        },
                        new
                        {
                            Id = 14,
                            AuthorFirst = "Joyce",
                            AuthorLast = "Tromp",
                            Description = "Veritatis libero ut enim ut. Numquam totam aut earum est. Dolor optio consequuntur illum alias ex ut cumque. Architecto perferendis voluptates molestiae reprehenderit perferendis dolorum esse rerum. Ea voluptatem doloremque voluptatum.",
                            Title = "Monitored well-modulated database",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 15,
                            AuthorFirst = "Edna",
                            AuthorLast = "Wisoky",
                            Description = "Exercitationem expedita reprehenderit nisi perspiciatis et molestias ut ad. Aut animi aspernatur aspernatur. Quisquam delectus aut saepe natus sit corrupti sed facere. Quis eum tempora non enim et quam.",
                            Title = "Universal tertiary throughput",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 16,
                            AuthorFirst = "Rachael",
                            AuthorLast = "Kemmer",
                            Description = "Quia libero repellendus dolorum aut qui deserunt. Est ex voluptatem repudiandae qui et dolore. Eligendi eos sit. Voluptatem eligendi vitae. A voluptate delectus sit.",
                            Title = "User-centric client-server task-force",
                            isAvailable = false
                        });
                });

            modelBuilder.Entity("RazorLibraryProject.Models.LibraryAccount", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("roleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("roleId");

                    b.HasIndex("userId");

                    b.ToTable("LibraryAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RazorLibraryProject.Models.LibraryAccount", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "role")
                        .WithMany()
                        .HasForeignKey("roleId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("role");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
